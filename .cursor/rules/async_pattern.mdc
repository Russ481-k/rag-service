---
alwaysApply: true
---

# 3. 비동기 작업 처리 패턴 (Asynchronous Task Pattern)

본 프로젝트는 사용자 경험을 향상시키고 시스템 자원을 효율적으로 사용하기 위해, 시간이 오래 걸리는 작업을 처리할 때 일관된 비동기 패턴을 적용합니다.

## 핵심 원칙

> **"요청은 즉시, 처리는 나중에 (Request Immediately, Process Later)"**

사용자의 요청(특히 파일 업로드와 같이 무거운 작업)이 API 서버에 도달했을 때, 서버는 해당 작업을 직접 처리하지 않고 즉시 백그라운드 작업 큐에 위임해야 합니다.

## 구현 패턴

1.  **API 엔드포인트의 역할**:

    - API 엔드포인트(e.g., `POST /upload`)는 요청의 유효성을 최소한으로 검증합니다.
    - 유효한 요청인 경우, 처리해야 할 작업의 정보(e.g., 파일 경로, 문서 ID)를 담아 Celery 태스크를 호출합니다.
    - Celery 태스크가 성공적으로 큐에 등록되면, API는 사용자에게 **`task_id`**를 포함한 **`202 Accepted`** 응답을 즉시 반환합니다.

2.  **Celery Worker의 역할**:

    - 백그라운드에서 실행되는 Celery Worker는 Redis의 작업 큐를 감시합니다.
    - 새로운 작업이 들어오면 이를 가져와 실제 로직(e.g., 문서 파싱, 청킹, 임베딩, 데이터베이스 저장)을 수행합니다.
    - 작업의 진행 상태나 결과를 Redis 결과 백엔드에 업데이트합니다.

3.  **상태 조회 엔드포인트**:
    - 사용자는 `202 Accepted` 응답으로 받은 `task_id`를 사용하여 별도의 상태 조회 엔드포인트(`GET /status/{task_id}`)를 호출할 수 있습니다.
    - 이 엔드포인트는 Redis 결과 백엔드를 조회하여 현재 작업의 상태(`pending`, `processing`, `completed`, `failed`)를 사용자에게 반환합니다.

## 적용 대상 작업

- 문서 업로드 및 파싱
- 텍스트 청킹 및 임베딩 생성
- Vector Store 인덱싱
- (향후) 대규모 데이터 삭제 또는 재처리
